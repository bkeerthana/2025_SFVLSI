1_Day:
Syllabus Overview- Instructions - Common Mistakes - How to avoid 
Feedback Link : 
https://forms.office.com/r/0VzcKYdzdX

Operating System - 
        Kernel 
        Shell 
Lab:
Check the kernel version, and default shell
Getting Help 
Env Variables 

Reference: 
https://bkeerthanamanipal.blogspot.com/2024/11/getting-help-in-linux.html

2_Day: 

Hello world program using bash script 
chmod 
    - numeric 
    - mnemonic
globbing 
    - * 
    - ? 

Reference: 
https://linux-training.be/funhtml/ch17.html

3_Day: 
globbing
  - {} 
  - []
  - [^]

Extended Globbing 
  -@(pattern list| pattern list)
  -!(pattern list| pattern list) 

Absolute Path Vs Relative Path
Explored file system 
          - file command 
          - /etc/
          - /dev/null
https://www.linuxjournal.com/content/bash-extended-globbing

4_Day: 
Redirection
        > 
        >>
        <
        2>
        2>>

Pipe 
        | 

Basic Commands
        head 
        tail 
        cat 

Power Utilities 
        tr
        sort 
        uniq
        wc 

5_Day:

Quotes 
     ' ' 
     " " 
     ` ` 
     \ 

Power Utilities / Filter 
     cut 
        -f 
        -c 
        -d 

Revisit 
      Redirection 
      globbing 

6_Day: Theory + Lab 
Power utilites / filter 

tr 
  -d 
  -s 
  -c 

Example : usecase with ls -l 

sort 
  -n 
  -r 
  -k 
  -M 
  -t 

Example : usecase with ls -l 

grep 
  - n 
  - c
  - i 
  - q 

read 
   -p 

exit status 
   $? 

constructs 
   if  test  condition 
   comparison operators 
          -numeric 
          -string 

shell script using grep and read statement

Day-7: 
grep 
   -A# (after)
   -B# 
   -C# 
   -e
   -E
   -f 
   -h 
   -l 
   -s 

egrep 

Regular expression 
   | - Alternative 
   ^
   $ 
   \< 
   \>
   [ ] ,  [^] , [1-9] 

Day-8: 
Arithmetic Operations 

Method 1: Shell Arithmetic 
          $((expression))

Method 2: using bc 
          echo "10 + 12" | bc 

Method 3: using let 
          let a=10 
          let b=20
          let c=a+b

Method 4: using expr
          a=10
          b=20
          c=`expr $a+$b`

Day-9:
Command Line Arguments 

To pass command line arguments
./program.sh argument1 argument2 


To access the argument, 
      inside the script, use 

$1 
$2 ..... 

$1 - to access first argument 
$2 - to access second argument 
.....
${10} - to access tenth argument 
$#    - to get the number of arguments 

example: 
Use with grep 

Readings:
https://www.baeldung.com/linux/use-command-line-arguments-in-bash-script

Day-10:
Lab+Theory 
More on Command-line arguments 

$@ 
$*  

${!#} - to get the last argument from the command line arguments 

Slicing: 
${@:start:length}

${@: -1} - To get the last value 
${@: 1}  - To get all the values 

Example:
-----------------------------------------------------------------------------------
#!/bin/bash

# Strings and Parameter Expansions( ${} )
rand_str="Scripting is used to automate the task"

echo "$rand_str" 

# get string length
echo "string length: ${#rand_str}"

# slicing 
# ${string:start:length} 

# extract from the index 2 to end of the string 
echo "from index 2: ${rand_str:2}"

# get string from 2nd index for length 7
echo "from index 2, length 7: ${rand_str:2:7}"

# last character
echo "last character: ${rand_str: -1}"

# except last character
echo "except last character: ${rand_str:0:${#rand_str}-1}"

--------------------------------------------------------------------------

For looping 

for arg in $@ 
do 
  echo $arg
done 

File operators 
 -f - regular file 
 -d - directory 
 -e - exist or not 

 -r - read permission or not 
 -w - write permission or not 
 -x-  execute permission or not 

 -s  empty file 
 -n  

More on Regex 
grouping 
   (expression1| exxpression2) 
   backreference 

Explore: 
https://regexcrossword.com/tutorial/1
Readings:
https://zerotomastery.io/blog/bash-regex/#Literals
https://tldp.org/LDP/abs/html/x17129.html

Note: 
The difference between filename globbing and regular expressions. 
Filename globbing only works for filenames, while regular expressions are used to match patterns in text more generally.
While they both use the same set of symbols, they mean different things 
(e.g., * matches 0 or more characters when globbing, but matches 0 or more repetitions of the character that precedes it when used in a regular expression).

Day-11:
Introduction to sed 
         - What is sed 
         - importance of sed 
         - How sed works 
         - pattern buffer and hold buffer 

sed -options 'sed_command' filename 

sed -options 'address sed_command' filename 
sed -options 'address1,address2 sed_command' filename 

sed -options '/pattern/ sed_command' filename 
sed -options '/pattern1/,/pattern2/ sed_command' filename 

sed -options '!sed_command' filename 
sed -options 'address !sed_command' filename 
sed -options '/patttern/ !sed command' filename 


Options 

-i - infile 
-n - to suppress the default output of the 'p' command 


sed commands: 
p  - print 
d  - delete 

Day-12: 

sed commands 
     y - translate 
     s - substitute 
          flags 
          g
          # 
          #g 
          i  
     a - append 
     i - insert 
     c - change 

grouping 
    { 
    sed commands
    } 

Options 
    -e to execute multiple commands 
    -f to execute the sed commands from the file 

Day-13: 
Lab + class
sed 
    q - quit 
    Q - Quit 

    w - write 
    
    g - get overwrite
    G - get append

    l - To check special characters 

    s command 
    flag 
    ---------------------
    w filename 
    p 
    ---------------------
    pattern holding & 

    Example : 'sed s/.*/[&]/' filename 

Process 
    Foreground 
    Background 

    sleep 

    bg
    fg 

    jobs 

    kill 
    killall

    pstree

    ps aux 

Scheduling 
    at 
    atq 


Day-14:
atrm 
at -f 

crontab
crontab -e
crontab -l 

Chaining commands in bash 
&& || ;

awk 
syntax:
awk -options '/pattern/{action}' filename 

pattern or action - any one is optional The The 
default action is print

Day-15: 
when to use 
            -grep 
            -sed 
            -awk 

awk - General syntax 

awk -options program filename 

program 
   - pattern block 
   - action block 

Pattern Block 
   - matching pattern 
   - comparision 
   - conditional statements 

Action Block 
   - print 
   - increment, decrement 
   - array operations 
   - if conditional statements 
   - looping statements 
   - built-in functions 
              - string 
              - math 
   - system commands  and so on 

Awk process 
       - file  - collection of records 
       - record - collection of fields 

field 
The first field is represented by $1
The second field is represented by $2 
The whole record is represented by $0 

Options 
-F  - used to specify a field seperator 

subroutine
  BEGIN { } 
  
  END   { } 

Examples 
       action block: print 
       pattern block: /pattern matching/ 

Built-in variables
FS - Field separator 

Day-16
Theory + Lab 

Built-in variables 
   FS - Field Separator
   OFS - Output Field separator 

   RS - Record Separator 
   ORS - Output Record Seperator  
   NF - Number of fields

Pattern Block 
    What are the possibilities in Pattern Block
   - matching pattern 
        simple -    /pattern/
        complex-    /regex pattern/ 
   - comparison 
         x < y True if x is less than y.
         x <= y True if x is less than or equal to y.
         x > y True if x is greater than y.
         x >= y True if x is greater than or equal to y.
         x == y True if x is equal to y.
         x != y True if x is not equal to y.
         Explore: x ~ y True if x matches the regular expression described by y.
         Explore: x !~ y True if x does not match the regular expression described by y.

    - conditional 
          and  - && 
          or   - || 
          not  - !


     Action block   { }  
       
        What are the possibilities in the action block? 
      

       - Default statement 
             print 

        - Expression 
              simple 
              count = $2 + $3 / $4;

        - Function calls 
                 -string
                       length 
                 -math 
                       explore 

      BEGIN and END Block
         BEGIN { 
               } 

          END{
             } 

       Option 
           -f 

Day-17

 - option 
               -v 

 - String built in functions 
               - tolower 
               - toupper 

  - Different methods to execute awk script 
              - command line 
              - using option -f
              - awk as executable 
         
Day-18

         - Control Structure          
              conditional 
                   
              Looping 
                    
              
         - More on Built in variables 
              FNR  (Explore) 
              FILENAME 
 
         - command line arguments 
              argc argv[]

         - string built-in functions
              sub
              gsub
              split 

         -system 

         -getline 


Day-19
         Perl 
            - scalar 
                  hold string, numeric, boolean
            - Operations 
                  string operations 
                        - concat 
                        - repeat 
                        - compare - le, eq, cmp and so on 
                        - pattern matching 
                        - chop 
                        - chomp 
                  numeric operations  
                        - arithmetic operations 
                        - compare 

            - <> Operator 

            - Intro to conditional statements 

Day-20: 
            Perl array 
            How to create an array 
            How to access an array element 
                  $array_name[index]
            How to delete an item 
                 - pop   (last item)
                 - shift (first item) 
                 - splice 
            How to add an item to the list 
                 - push
                 - unshift 
                 - splice 
            sort 
            reverse 
            count the number of items in the array 
              - scalar

Day-21: 
           Pattern Matching 
                  m operator 

           Regular expression 

           flag 
              i
              g 

Try this code: 
#!/usr/bin/perl
   
# Initializing the strings

$string1 = 'Pattern Matching is very Powerrrrrrrrrrrrrrfullllllllllllllllllllllllll 123';

  
# Calling tr function
#$string1 =~ tr/abc/bcd/;
#$string1 =~ tr/[0-9]//d;
#$string1 =~ tr/[0-9]//cd;
#$string1 =~ tr/rl//s;


# use to count number of matching characters 
#$cnt=$string1 =~ tr/a-z//;

# r modifier lets you retain original variable untouched and assign modified string to another variable
$upper= $string1 =~ tr/a-z/A-Z/r;

# c  complements 
# d  delete
# s  supress

#$string1 =~ s/Powerful/Intresting/;

# Printing the translated strings
print "$string1\n";
print "$upper\n";
print "$cnt";

Day-22: 
Revisiting Perl 
Quotes 
  q{} 
  qq{}
  qw{} 
  qx{}
Executing System commands 
  system() 

get the array of values and store in array using <> 

split 
join 

comparison operator 
conditional operator 

Binding operator 
  m 
    m//gi
  s 
    s///gi
  tr 
   tr///cds

Special variables 
  $& 
  $`
  $' 
extract exact, before and after match 

PCRE 
  \d
  \w
  \D
  \W
  \s 
  \S 

conditional statements in perl 

Day-22: 
Command line arguments: 
         How to pass arguments 
         How to access 
             ARGV 
         to Count - @ARGV 
         to find the index of the last item - $#ARGV 
         shift @ ARGV - to access the first item from the list 

File Literals 
         __FILE__
         __LINE__
         __END__

File handling 
         open 
             open (filehandle, mode, filename) 
             Mode: 
             
| Mode  | Meaning                               | Example                        |
| ----- | ------------------------------------- | ------------------------------ |
| `<`   | Read-only (default)                   | `open(FH, '<', 'input.txt');`  |
| `>`   | Write (creates/truncates file)        | `open(FH, '>', 'output.txt');` |
| `>>`  | Append (creates file if missing)      | `open(FH, '>>', 'log.txt');`   |
| `+<`  | Read and write (existing file)        | `open(FH, '+<', 'data.txt');`  |
| `+>`  | Read and write (overwrite/create new) | `open(FH, '+>', 'data.txt');`  |
| `+>>` | Read and append                       | `open(FH, '+>>', 'data.txt');` |

             open the file in the read mode 
             print all the contents from the file 
             add the line number 
             pattern matching in file 
           
         close 

$. --> for line number 
$! --> show error details 
$_ --> default scalar variable name 
@_ --> default array variable name 
%_ --> default hash variable name 


Day-23: 

read 
write 

__DATA__

file handling 
     - s
     - matching

version control
     - what 
     - why 
     - developed by 
     - types 
           - centralized 
           - distributed 

     - getting help 
     - git config 
     - git init
     - git status 
     - git add 
     - git log 
     - git rm

Day-24: 
Revisit 
     - working directory Vs. staging area vs. repo 
     - git clone 
     - git ls-files 
     - git add 
          git add . 
          git add filename 
          git add *.txt 
     - git commit 
     - git log 
         - git log --oneline 
         - git log --summary 
     - git status
         - git status -s
     - git diff 
     - git diff --staged 
     - git branch 
s
