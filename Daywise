1_Day:
Syllabus Overview- Instructions - Common Mistakes - How to avoid 
Feedback Link : 
https://forms.office.com/r/0VzcKYdzdX

Operating System - 
        Kernel 
        Shell 
Lab:
Check the kernel version, and default shell
Getting Help 
Env Variables 

Reference: 
https://bkeerthanamanipal.blogspot.com/2024/11/getting-help-in-linux.html

2_Day: 

Hello world program using bash script 
chmod 
    - numeric 
    - mnemonic
globbing 
    - * 
    - ? 

Reference: 
https://linux-training.be/funhtml/ch17.html

3_Day: 
globbing
  - {} 
  - []
  - [^]

Extended Globbing 
  -@(pattern list| pattern list)
  -!(pattern list| pattern list) 

Absolute Path Vs Relative Path
Explored file system 
          - file command 
          - /etc/
          - /dev/null
https://www.linuxjournal.com/content/bash-extended-globbing

4_Day: 
Redirection
        > 
        >>
        <
        2>
        2>>

Pipe 
        | 

Basic Commands
        head 
        tail 
        cat 

Power Utilities 
        tr
        sort 
        uniq
        wc 

5_Day:

Quotes 
     ' ' 
     " " 
     ` ` 
     \ 

Power Utilities / Filter 
     cut 
        -f 
        -c 
        -d 

Revisit 
      Redirection 
      globbing 

6_Day: Theory + Lab 
Power utilites / filter 

tr 
  -d 
  -s 
  -c 

Example : usecase with ls -l 

sort 
  -n 
  -r 
  -k 
  -M 
  -t 

Example : usecase with ls -l 

grep 
  - n 
  - c
  - i 
  - q 

read 
   -p 

exit status 
   $? 

constructs 
   if  test  condition 
   comparison operators 
          -numeric 
          -string 

shell script using grep and read statement

Day-7: 
grep 
   -A# (after)
   -B# 
   -C# 
   -e
   -E
   -f 
   -h 
   -l 
   -s 

egrep 

Regular expression 
   | - Alternative 
   ^
   $ 
   \< 
   \>
   [ ] ,  [^] , [1-9] 

Day-8: 
Arithmetic Operations 

Method 1: Shell Arithmetic 
          $((expression))

Method 2: using bc 
          echo "10 + 12" | bc 

Method 3: using let 
          let a=10 
          let b=20
          let c=a+b

Method 4: using expr
          a=10
          b=20
          c=`expr $a+$b`

Day-9:
Command Line Arguments 

To pass command line arguments
./program.sh argument1 argument2 


To access the argument, 
      inside the script, use 

$1 
$2 ..... 

$1 - to access first argument 
$2 - to access second argument 
.....
${10} - to access tenth argument 
$#    - to get the number of arguments 

example: 
Use with grep 

Readings:
https://www.baeldung.com/linux/use-command-line-arguments-in-bash-script

Day-10:
Lab+Theory 
More on Command-line arguments 

$@ 
$*  

${!#} - to get the last argument from the command line arguments 

Slicing: 
${@:start:length}

${@: -1} - To get the last value 
${@: 1}  - To get all the values 

Example:
-----------------------------------------------------------------------------------
#!/bin/bash

# Strings and Parameter Expansions( ${} )
rand_str="Scripting is used to automate the task"

echo "$rand_str" 

# get string length
echo "string length: ${#rand_str}"

# slicing 
# ${string:start:length} 

# extract from the index 2 to end of the string 
echo "from index 2: ${rand_str:2}"

# get string from 2nd index for length 7
echo "from index 2, length 7: ${rand_str:2:7}"

# last character
echo "last character: ${rand_str: -1}"

# except last character
echo "except last character: ${rand_str:0:${#rand_str}-1}"

--------------------------------------------------------------------------

For looping 

for arg in $@ 
do 
  echo $arg
done 

File operators 
 -f - regular file 
 -d - directory 
 -e - exist or not 

 -r - read permission or not 
 -w - write permission or not 
 -x-  execute permission or not 

 -s  empty file 
 -n  

More on Regex 
grouping 
   (expression1| exxpression2) 
   backreference 

Explore: 
https://regexcrossword.com/tutorial/1
Readings:
https://zerotomastery.io/blog/bash-regex/#Literals
https://tldp.org/LDP/abs/html/x17129.html

Note: 
The difference between filename globbing and regular expressions. 
Filename globbing only works for filenames, while regular expressions are used to match patterns in text more generally.
While they both use the same set of symbols, they mean different things 
(e.g., * matches 0 or more characters when globbing, but matches 0 or more repetitions of the character that precedes it when used in a regular expression).

Day-11:
Introduction to sed 
         - What is sed 
         - importance of sed 
         - How sed works 
         - pattern buffer and hold buffer 

sed -options 'sed_command' filename 

sed -options 'address sed_command' filename 
sed -options 'address1,address2 sed_command' filename 

sed -options '/pattern/ sed_command' filename 
sed -options '/pattern1/,/pattern2/ sed_command' filename 

sed -options '!sed_command' filename 
sed -options 'address !sed_command' filename 
sed -options '/patttern/ !sed command' filename 


Options 

-i - infile 
-n - to suppress the default output of the 'p' command 


sed commands: 
p  - print 
d  - delete 

Day-12: 

sed commands 
     y - translate 
     s - substitute 
          flags 
          g
          # 
          #g 
          i  
     a - append 
     i - insert 
     c - change 

grouping 
    { 
    sed commands
    } 

Options 
    -e to execute multiple commands 
    -f to execute the sed commands from the file 







